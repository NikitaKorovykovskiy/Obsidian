{
	"nodes":[
		{"id":"29bbd25c184e6cbb","type":"text","text":"Порядок запуска и подключения\n1. Скопировать и разорхивировать тестовую бд. Она в переписке с Ильей самая первая\n2. Заполнить .env в корне проекта\n3. Добавить service-account-key, его добавить в backend\nУ Назара в переписке\n4. Залогиниться на харборе \"docker login harbor.cifra-k.ru\" \"login = ccr.harbor_user\", \"password = \"x?KvHb$MFKTU$8\"\n5. Запустить контейнеры","x":-660,"y":-440,"width":866,"height":280},
		{"id":"bbdbc5657542281e","type":"text","text":"Запуск проекта esia-service-python\n1. Разместить файл .env  в директории /esia. Этот файл в переписке с Антоном\n2. Удалить из зависимостей  pygost==5.11\n3. Сбилдить и запустить докер контейнер командой 'sudo docker build -t esia-test --file docker/Dockerfile . && docker run -p 8000:8080 esia-test'","x":-677,"y":-113,"width":883,"height":173},
		{"id":"4bd3cb44c643ac14","type":"text","text":"Фильтрация записей созданных менее 24 часов назад\n```python\n\nfrom datetime import timedelta # Возвращает время(1 день, 1 час и т.д.)\nfrom django.utils import timezone # Возвращает вывод, как datetime.now()\n# timezone.localtime() - timedelta(hours = 24) = 2023-11-24 - 1 day = 2023-11-23\nobjects.filter(create_at__gte = timezone.localtime() - timedelta(hours=24))\n```\n","x":300,"y":-440,"width":527,"height":300},
		{"id":"102c45809d76c36c","type":"text","text":"Настраиваемые штуки","x":438,"y":-600,"width":250,"height":60},
		{"id":"a2505a1378fd4dbd","type":"text","text":"Задача в по 1 апи и выводу записей из одной модели добавить вывод из другой модели, но без общего сериализатора\n```python\n\ndef list(self, request):\n\tqueryset_broadcast = self.get_queryset() # Тут был переопредел queryset\n\tserializer_broadcast = BroadcastShortSerializer(queryset_broadcast, many=True).data # Сериализатор для 1 модели, вывод в виде словаря\n\t\n\tpublication_time_24_hour = timezone.localtime() - timedelta(hours=24)\n\tqueryset_emergencymessage = EmergencyMessage.objects.filter(created_at__lte=publication_time_24_hour)\n\tserializer_emergencymessage = EmergencyMessageSerializer(queryset_emergencymessage, many=True).data # Сериализатор для второй модели, вывод в виде словаря\n\t\n\tcombined_data = serializer_broadcast + serializer_emergencymessage # Объединил выводы словарей в 1\n\t\n\treturn Response(combined_data)\n```","x":206,"y":-1140,"width":798,"height":497},
		{"id":"989511eee09a5733","type":"text","text":"Добавить в словарь вывода поле без добавления его в модели, Можно настроить дополнительное поле в сериализаторе этой модели\n```python\nclass EmergencyMessageSerializer(serializers.ModelSerializer):\n\tkind = serializers.SerializerMethodField() # Переопределить это поле\n\tclass Meta:\n\t\n\tmodel = EmergencyMessage\n\tfields = (\n\t...\n\t\"kind\",\n\t...)\n\t\n\tdef get_kind(self, obj): # Должно называться с get_<name_field>, которое переопределил\n\t\n\treturn \"EMERGENCYMESSAGE\"\n```","x":1040,"y":-1140,"width":744,"height":434},
		{"id":"c95e60491f0badda","type":"text","text":"Декоратор для получения sql запроса\n``` python\nimport time\nfrom django.db import connection\nfrom functools import wraps\n\ndef log_queries(func):\n\t@wraps(func)\n\n\tdef wrapper(self, *args, **kwargs):\n\t\tresult = func(self, *args, **kwargs)\n\t\tprint(\"Executed SQL queries:\")\n\t\tfor query in connection.queries:\n\t\t\tprint(query['sql'])\n\t\treturn result\n\treturn wrapper\n# Но он работает не очень хорошо, т к надо иногда добавлять условие for i in queryset: pass\n\nЕще можно просто прописать - print(queryset.query)\n```","x":-920,"y":-2240,"width":560,"height":494},
		{"id":"f16aa2cd298f0511","x":-280,"y":-2240,"width":555,"height":280,"type":"text","text":"Настройка debug toolbar\nПроверить по доке основные моменты.\nПотом проверить \n```\ndocker network ls - и выбрать сеть с нашим названием\ndocker network inspect 04a77a8a2878\n\"Gateway\": \"192.168.160.1\" отсюда взять ip\n```\nи вписать в INTERNAL_IPS\n"},
		{"id":"8595e243db6ad730","x":-264,"y":-1893,"width":250,"height":60,"type":"text","text":"Работа с debug toolbar\nВыполняем в swagger запрос, переход в историю, там жмякаешь на нужную строчку.\nВ ней будет много зап"}
	],
	"edges":[
		{"id":"3c19c3a2120c0b7d","fromNode":"4bd3cb44c643ac14","fromSide":"top","toNode":"102c45809d76c36c","toSide":"bottom"},
		{"id":"cd45f4e1f8ca2557","fromNode":"a2505a1378fd4dbd","fromSide":"bottom","toNode":"102c45809d76c36c","toSide":"top"},
		{"id":"d34031f40f11218f","fromNode":"989511eee09a5733","fromSide":"bottom","toNode":"102c45809d76c36c","toSide":"right"}
	]
}