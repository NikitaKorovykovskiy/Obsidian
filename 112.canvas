{
	"nodes":[
		{"id":"4bd3cb44c643ac14","type":"text","text":"Фильтрация записей созданных менее 24 часов назад\n```python\n\nfrom datetime import timedelta # Возвращает время(1 день, 1 час и т.д.)\nfrom django.utils import timezone # Возвращает вывод, как datetime.now()\n# timezone.localtime() - timedelta(hours = 24) = 2023-11-24 - 1 day = 2023-11-23\nobjects.filter(create_at__gte = timezone.localtime() - timedelta(hours=24))\n```\n","x":300,"y":-279,"width":560,"height":300},
		{"id":"b32924d34c852466","type":"text","text":"ФИЛЬТРАЦИЯ В ПЕРЕОПРЕДЕЛЕННОМ МЕТОДЕ LIST\nВ случае, если стоит фильтрация на уровне всего проекта или сделан собственный фильтр, и во вью переопределен метод list(), в котором по сути и есть метод фильтрации. То делаем так:\n - После получении queryset'a \n ```python\n queryset_broadcast_filter = self.filter_queryset(self.get_queryset()) # Передаем наш кверисет. С помощью filter_queryset используется наш фильтр указанный после определения класса.\n # Если нужно использовать другой фильтр, например для другого queryset'a, то необходимо сделать так\nself.filterset_class = EmergencyMessageFilter # Тут переопределяется фильтр на нам необходимый\nqueryset_emergencymessage_filter = self.filter_queryset(self.get_queryset_emmergencymessages()) # Так же используется фильтрация\n```","x":-400,"y":-279,"width":640,"height":461},
		{"id":"5df70fb388ae1df1","type":"text","text":"ПЕРЕОПРЕДЕЛЕННЫЙ МЕТОД LIST()","x":-256,"y":-415,"width":353,"height":50,"color":"4"},
		{"id":"bbdbc5657542281e","type":"text","text":"Запуск проекта esia-service-python\n1. Разместить файл .env  в директории /esia. Этот файл в переписке с Антоном\n2. Удалить из зависимостей  pygost==5.11\n3. Сбилдить и запустить докер контейнер командой 'sudo docker build -t esia-test --file docker/Dockerfile . && docker run -p 8000:8080 esia-test'","x":-1800,"y":-953,"width":883,"height":173},
		{"id":"29bbd25c184e6cbb","type":"text","text":"Порядок запуска и подключения\n1. Скопировать и разорхивировать тестовую бд. Она в переписке с Ильей самая первая\n2. Заполнить .env в корне проекта\n3. Добавить service-account-key, его добавить в backend\nУ Назара в переписке\n4. Залогиниться на харборе \"docker login harbor.cifra-k.ru\" \"login = ccr.harbor_user\", \"password = \"x?KvHb$MFKTU$8\"\n5. Запустить контейнеры","x":-1783,"y":-1280,"width":866,"height":280},
		{"id":"7a050afd45ad17bf","x":1099,"y":-706,"width":163,"height":50,"color":"4","type":"text","text":"SERIALIZERS"},
		{"id":"989511eee09a5733","type":"text","text":"Добавить в словарь вывода поле без добавления его в модели, Можно настроить дополнительное поле в сериализаторе этой модели\n```python\nclass EmergencyMessageSerializer(serializers.ModelSerializer):\n\tkind = serializers.SerializerMethodField() # Переопределить это поле\n\tclass Meta:\n\t\n\tmodel = EmergencyMessage\n\tfields = (\n\t...\n\t\"kind\",\n\t...)\n\t\n\tdef get_kind(self, obj): # Должно называться с get_<name_field>, которое переопределил\n\t\n\treturn \"EMERGENCYMESSAGE\"\n```","x":1020,"y":-1203,"width":744,"height":434},
		{"id":"c95e60491f0badda","type":"text","text":"Декоратор для получения sql запроса\n``` python\nimport time\nfrom django.db import connection\nfrom functools import wraps\n\ndef log_queries(func):\n\t@wraps(func)\n\n\tdef wrapper(self, *args, **kwargs):\n\t\tresult = func(self, *args, **kwargs)\n\t\tprint(\"Executed SQL queries:\")\n\t\tfor query in connection.queries:\n\t\t\tprint(query['sql'])\n\t\treturn result\n\treturn wrapper\n# Но он работает не очень хорошо, т к надо иногда добавлять условие for i in queryset: pass\n\nЕще можно просто прописать - print(queryset.query)\n```","x":901,"y":-274,"width":560,"height":494},
		{"id":"a2505a1378fd4dbd","type":"text","text":"Задача в по 1 апи и выводу записей из одной модели добавить вывод из другой модели, но без общего сериализатора\n```python\n\ndef list(self, request):\n\tqueryset_broadcast = self.get_queryset() # Тут был переопредел queryset\n\tserializer_broadcast = BroadcastShortSerializer(queryset_broadcast, many=True).data # Сериализатор для 1 модели, вывод в виде словаря\n\t\n\tpublication_time_24_hour = timezone.localtime() - timedelta(hours=24)\n\tqueryset_emergencymessage = EmergencyMessage.objects.filter(created_at__lte=publication_time_24_hour)\n\tserializer_emergencymessage = EmergencyMessageSerializer(queryset_emergencymessage, many=True).data # Сериализатор для второй модели, вывод в виде словаря\n\t\n\tcombined_data = serializer_broadcast + serializer_emergencymessage # Объединил выводы словарей в 1\n\t\n\treturn Response(combined_data)\n```","x":160,"y":-1266,"width":798,"height":497},
		{"id":"5b05ef98d22a9230","x":142,"y":-600,"width":1654,"height":60,"color":"2","type":"text","text":"НАСТРОЕННЫЕ МНОЙ ЭЛЕМЕНТЫ В ПРОЕКТЕ"},
		{"id":"d7fb7b18f7e04e93","x":-256,"y":-706,"width":156,"height":50,"color":"4","type":"text","text":"МИГРАЦИИ"},
		{"id":"2a0bec99b7faccd7","type":"text","text":"Проверка в модели на непустое поле в виде пробела\n```python\nfrom django.core.exceptions import ValidationError\nimport html\nimport re\n\ndef validate_not_only_spaces(space):\n    value = html.unescape(space)\n    pattern_space = re.compile(r'^<p>\\s*(</p><p>|<br>|\\s*)*\\s*</p>$')\n    if pattern_space.match(value) or not value.strip():\n        raise ValidationError(\"Поле не может состоять только из пробелов.\", code='invalid')\n\n\nmessage = models.TextField(\n...\nvalidators=[validate_not_only_spaces]\n)\n```","x":1880,"y":-1221,"width":676,"height":452},
		{"id":"74302cd1653e571d","x":-372,"y":-1207,"width":389,"height":438,"type":"text","text":"КАК СДЕЛАТЬ ОТКАТ МИГРАЦИИ\nН-р: Все запущено в docker.\n1. Заходим внутрь контейнера\n2. Смотрим номер миграции, на которую необходимо вернуться\n3. python3 manage.py migrate broadcast 0024\n4. Удаляем миграции, которые не актуальны (Все после 0024)\nУказывать надо только название модуля даже, если он расположен со всеми в одной папке (modules/broadcast);\nуказать просто номер 0024, без значений после."},
		{"id":"f16aa2cd298f0511","type":"text","text":"Настройка debug toolbar\n1. Проверить по доке основные моменты.\n2. Потом проверить \n```\ndocker network ls - и выбрать сеть с нашим названием\ndocker network inspect 04a77a8a2878\n\"Gateway\": \"192.168.160.1\" отсюда взять ip\n```\nи вписать в INTERNAL_IPS\n3. Изменить версию тулбара на 3.2.4 и тулбар-форс 0.2","x":1519,"y":-274,"width":555,"height":321},
		{"id":"8595e243db6ad730","type":"text","text":"Работа с debug toolbar\n1. Выполняем в swagger запрос, переход в историю, там жмякаешь на нужную строчку.\n2. В ней будет много запросов, открыть первый, где написано - дубликатов 12 и посмотреть последнюю строчку.\n3. Если это foreign key в модели то запихать в select_related, если many_to_many то в prefetch_related и все будет в ажуре\n","x":1519,"y":75,"width":555,"height":291},
		{"id":"426f41f2d0602fce","x":303,"y":47,"width":557,"height":368,"type":"text","text":"Кастомный фильтр с выбором ИЛИ через Q\n```python\nfrom django.db.models import Q\ndef filter_title_explanation(self, queryset, name, value):\n\n\tq = Q(title__icontains=value) | Q(explanation__icontains=value)\n\treturn queryset.filter(q)\n# Q позволяет комбинировать условия фильтрации (И, ИЛИ, НЕТ), для создания сложных запросов фильтрации БД. Знак \"|\" означает OR.\n# icontains - условия присутствия value в title без учета регистра\n```"},
		{"id":"7306a9556bd22752","type":"text","text":"ПАГИНАЦИЯ В ПЕРЕОПРЕДЕЛЕННОМ МЕТОДЕ LIST()\n\nВ случае, если стоит пагинация на уровне всего проекта, и во вью переопределен метод list(), в котором по сути и есть эта пагинация. То делаем так:\n - После сериализации данных и получение .data \n ```python\n page = self.paginate_queryset(result) # пагинирует кверисет\n if page is not None:\n     return self.get_paginated_response(page) # возвращает постраничный вывод\n```\n ","x":-400,"y":220,"width":640,"height":360},
		{"id":"ca86655b63f2bc81","x":1095,"y":-415,"width":172,"height":50,"color":"4","type":"text","text":"ДЕКОРАТОРЫ"},
		{"id":"6b4959d0b961fc20","x":493,"y":-420,"width":175,"height":50,"color":"4","type":"text","text":"ФИЛЬТРАЦИЯ"}
	],
	"edges":[
		{"id":"3c19c3a2120c0b7d","fromNode":"4bd3cb44c643ac14","fromSide":"top","toNode":"6b4959d0b961fc20","toSide":"bottom"},
		{"id":"7b1b51623c1f78c1","fromNode":"8595e243db6ad730","fromSide":"top","toNode":"f16aa2cd298f0511","toSide":"bottom"},
		{"id":"2863368d9aba4402","fromNode":"c95e60491f0badda","fromSide":"top","toNode":"ca86655b63f2bc81","toSide":"bottom"},
		{"id":"0b617eaa5c6e65f7","fromNode":"7306a9556bd22752","fromSide":"top","toNode":"b32924d34c852466","toSide":"bottom"},
		{"id":"acca0bf9bc8720de","fromNode":"426f41f2d0602fce","fromSide":"top","toNode":"4bd3cb44c643ac14","toSide":"bottom"},
		{"id":"55521ff2dec706d9","fromNode":"b32924d34c852466","fromSide":"top","toNode":"5df70fb388ae1df1","toSide":"bottom"},
		{"id":"3cecf7ddb4162eeb","fromNode":"989511eee09a5733","fromSide":"bottom","toNode":"7a050afd45ad17bf","toSide":"top"},
		{"id":"5671e499f6e41261","fromNode":"6b4959d0b961fc20","fromSide":"top","toNode":"5b05ef98d22a9230","toSide":"bottom"},
		{"id":"dce71a049d59346b","fromNode":"ca86655b63f2bc81","fromSide":"top","toNode":"5b05ef98d22a9230","toSide":"bottom"},
		{"id":"fe8659c5ac7e9c48","fromNode":"f16aa2cd298f0511","fromSide":"top","toNode":"5b05ef98d22a9230","toSide":"right"},
		{"id":"b7244915eb6170fa","fromNode":"2a0bec99b7faccd7","fromSide":"bottom","toNode":"5b05ef98d22a9230","toSide":"right"},
		{"id":"bddd37fefa056bf3","fromNode":"7a050afd45ad17bf","fromSide":"bottom","toNode":"5b05ef98d22a9230","toSide":"top"},
		{"id":"8fcaddcaea4afbc3","fromNode":"a2505a1378fd4dbd","fromSide":"bottom","toNode":"5b05ef98d22a9230","toSide":"left"},
		{"id":"b7875c6539ec630d","fromNode":"5df70fb388ae1df1","fromSide":"top","toNode":"5b05ef98d22a9230","toSide":"left"},
		{"id":"6266068cbbd22a51","fromNode":"d7fb7b18f7e04e93","fromSide":"bottom","toNode":"5b05ef98d22a9230","toSide":"left"},
		{"id":"3c098a4744ff0ee0","fromNode":"74302cd1653e571d","fromSide":"bottom","toNode":"d7fb7b18f7e04e93","toSide":"top"}
	]
}